// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  name           String
  email          String
  role           Role        @default(USER)
  password       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  defaultAddress Int?
  addresses      Address[]
  cartItems      CartItems[]
  orders         Order[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String?
  city      String
  pin       String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  desc          String
  price         Decimal
  tags          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cartItems     CartItems[]
  orderProducts OrderProduct[]

  @@map("products")
}

model CartItems {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart-items")
}

model Order {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  amount        Decimal
  address       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderProducts OrderProduct[]
  orderEvents   OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order-products")
}

model OrderEvent {
  id        Int                @id @default(autoincrement())
  orderId   Int
  order     Order              @relation(fields: [orderId], references: [id])
  productId Int
  status    ORDER_EVENT_STATUS @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@map("order-events")
}

enum ORDER_EVENT_STATUS {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}
